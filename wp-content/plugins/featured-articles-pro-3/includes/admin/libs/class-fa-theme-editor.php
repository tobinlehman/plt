<?php
if( !class_exists('FA_Themes_Manager') ){
	require_once fa_get_path('includes/admin/libs/class-fa-themes-manager.php');
}

/**
 * Slideshow themes editor. Extends FA_Themes_Manager
 *
 */
class FA_Theme_Editor{
	
	private $theme = false;
	
	/**
	 * Constructor
	 */
	public function __construct( $theme ){
		// get the theme
		$this->theme = fa_get_theme( $theme );		
	}
	
	/**
	 * Returns processed styles from a color stylesheet generated by the plugin.
	 * 
	 * @param string $theme - theme fodler name
	 * @param string $color_sheet - name of color stylesheet file (ie. red.css )
	 */
	public function get_stylesheet_color_rules( $color_sheet ){
		// get the theme details
		$theme = $this->get_the_theme();
		if( !$theme || is_wp_error( $theme ) ){
			return $theme;
		}
				
		// check if color exists in colors array
		if( !isset( $theme['colors'] ) || !array_key_exists( $color_sheet, $theme['colors'] ) ){
			$error = new WP_Error();
			$error->add(
				'fa-missing-color', 
				sprintf(
					__('Theme %s is missing color stylesheet %s.', 'fapro'), 
					$theme['theme_config']['name'], 
					$color_sheet
				)
			);
			return $error;
		}
		
		// check the file
		$file_path = wp_normalize_path( path_join( $theme['path'] , 'colors/' . $color_sheet . '.css') );
		if( !file_exists( $file_path ) ){
			$error = new WP_Error();
			$error->add(
				'fa-missing-file', 
				sprintf(
					__('Theme %s is missing stylesheet file %s.', 'fapro'), 
					$theme['theme_config']['name'], 
					$color_sheet
				)
			);
			return $error;
		}
		
		// get theme configurable styles
		$editable_css = $this->get_theme_styles();
		if( !$editable_css || is_wp_error( $editable_css ) ){
			return $editable_css;
		}
		
		// get content from CSS stylesheet
		$handle = @fopen( $file_path, 'rb' );
		if( !$handle ){
			$error = new WP_Error();
			$error->add(
				'fa-stylesheet-unreadable', 
				sprintf(
					__('Could not open stylesheet %s from theme %s', 'fapro'), 
					$color_sheet, 
					$theme['theme_config']['name']
				)
			);
			return $error;
		}
		
		// get the contents of the stylesheet
		$content = fread( $handle, filesize( $file_path ) );
		fclose( $handle );
		
		preg_match_all("#\t([a-z\-]+):(.*);\/\*(.*)\*\/#Ui", $content, $matches);
		$styles = array();
		
		if( !$matches[3] ){
			return array();
		}
		// create the stylesheet styles array
		foreach( $matches[3] as $key => $element ){
			$styles[ $element ][ $matches[1][ $key ] ] = $matches[2][ $key ];
		}
		
		// populate the result
		$result = array();
		foreach( $editable_css as $field => $details ){
			foreach( $details['properties'] as $property => $p_details ){
				// check if property exists in stylesheet
				$has_property = isset( $styles[ $field ][ $property ] );	
				// we'll be searching for some special types. If any found, mark it found.
				$was_processed = false;		
				// depending on property type, some actions are needed
				switch( $p_details['type'] ){
					// for sizes, user can choose unit. Size from stylesheet needs to be formatted to make it usable
					case 'size':
						if( $has_property ){
							preg_match( '|^([\.?0-9]+)([^0-9]+)$|Ui', $styles[ $field ][ $property ], $sizes );					
							
							if( !empty( $sizes ) ){					
								$result[ $field ][ $property ]['value'] = $sizes[1];
								$result[ $field ][ $property ]['unit'] = strtolower( $sizes[2] );						
							}else{
								$result[ $field ][ $property ]['value'] = $styles[ $field ][ $property ];
								$result[ $field ][ $property ]['unit'] = 'px';
							}	
							$was_processed = true;
						}
					break;
					// images are used for backgrounds. The plugin needs only the image address, without url(...)
					case 'image':
						if( $has_property ){
							$image = preg_match( '|url\(([^\(]+)\)|Ui', $styles[ $field ][ $property ], $match );
							if( isset( $match[1] ) && !empty( $match[1] ) ){
								$result[ $field ][ $property ] = $match[1];
							}else{
								$result[ $field ][ $property ] = 'none';
							}
							$was_processed = true;
						}
					break;
					// sizes only in pixels need to return only the numeric value, without px
					case 'size_px':
						if( $has_property ){
							$result[ $field ][ $property ] = (int) $styles[ $field ][ $property ];
						}else{
							$result[ $field ][ $property ] = '0';
						}
						$was_processed = true;
					break;
					// colors can have value transparent; make it empty if value is transparent
					case 'color':
						if( $has_property && strstr( $styles[ $field ][ $property ], 'transparent' ) ){
							$result[ $field ][ $property ] = '';
						}else if( $has_property ){
							$result[ $field ][ $property ] = $styles[ $field ][ $property ];
						}else{
							$result[ $field ][ $property ] = '';
						}
						$was_processed = true;
					break;
	
					case 'multi_value':
						$val_default = $has_property ? $styles[ $field ][ $property ] : $p_details['initial'];
						
						$vals_default = explode( ' ', $val_default );
						$index = 0;
						
						foreach( $p_details['values'] as $sp_name => $sp_details ){
							$sp_val = '';
							$d_val = array_key_exists( $index , $vals_default ) ? trim( $vals_default[ $index ] ) : '';
							
							switch( $sp_details['type'] ){
								case 'size_px':
									$sp_val = (int) $d_val;
								break;
								case 'color':
									$color = strstr( $d_val, 'transparent') ? '' : $d_val;	
									$sp_val = $color;
								break;	
							}						
							
							$result[ $field ][ $property ][ $sp_name ] = $sp_val;
							$index++;
						}
						
						$was_processed = true;
					break;	
				}
				// If item wasn't processed by the switch above, do it now
				if( !$was_processed ){
					// a default
					if( $has_property ){
						$result[ $field ][ $property ] = strtolower( $styles[ $field ][ $property ] );
					}else{
						$result[ $field ][ $property ] = '';
					}
				}	
			}
		}	
		return $result;		
	}
	
	/**
	 * Returns the default color styling rules set by theme author in theme functions.php file
	 * @param string $theme - theme folder
	 */
	public function get_default_color_rules(){
		// get the default styles set in theme functions.php file
		$elements = $this->get_theme_styles();
		if( !$elements || is_wp_error( $elements ) ){
			return $elements;
		}
		
		$result = array();
		foreach( $elements as $element => $details ){
			foreach( $details['properties'] as $property => $extra ){
				
				if( !isset( $extra['default'] ) || empty( $extra['default'] )  ){
					$extra['default'] = $extra['initial'];
				}
				
				$val_default = $extra['default'];
				
				switch( $extra['type'] ){
					case 'size':
						preg_match('|^([\.?0-9]+)([^0-9]+)$|Ui', $val_default, $sizes);
						$result[ $element ][ $property ]['value'] = $sizes[1];
						$result[ $element ][ $property ]['unit'] = $sizes[2];					
					break;
	
					case 'size_px':
						$result[ $element ][ $property ] = (int) $val_default;
					break;
	
					case 'color':
						$color = strstr( $val_default, 'transparent' ) ? '' : $val_default;	
						$result[ $element ][ $property ] = $color;
					break;
	
					case 'image':	

						$theme_data = $this->get_the_theme();
						$vd = strstr( $val_default, 'none' ) ? 'none' : $theme_data['url'].'/'.$val_default;					
						$result[ $element ][ $property ] = $vd;						
					break;
					
					case 'multi_value':
						
						$vals_default = explode(' ', $val_default);
						$index = 0;
						
						foreach( $extra['values'] as $sp_name => $sp_details ){
							$sp_val = '';
							$d_val = array_key_exists( $index , $vals_default) ? trim( $vals_default[ $index ] ) : '';
							
							switch( $sp_details['type'] ){
								case 'size_px':
									$sp_val = (int) $d_val;
								break;
								case 'color':
									$color = strstr( $d_val, 'transparent' ) ? '' : $d_val;	
									$sp_val = $color;
								break;	
							}						
							
							$result[ $element ][ $property ][ $sp_name ] = $sp_val;
							$index++;
						}					
					break;
						
					default:
						$result[ $element ][ $property ] = $val_default;
					break;	
				}
			}
		}
		return $result;		
	}
	
	/**
	 * Get theme CSS rules from CSS customizations function implemented in 
	 * theme functions.php file
	 * 
	 * @param string $theme - theme folder
	 */
	public function get_theme_styles(){
		// get theme details
		$theme_data = $this->get_the_theme();
		if( !$theme_data || is_wp_error( $theme_data ) ){
			return $theme_data;
		}
		// the theme folder
		$theme = $theme_data['dir'];
		
		// check if theme implements the filter for customizable CSS rules
		$theme_function = 'fa_theme_css_' . $theme;
		if( !function_exists( $theme_function ) ){
			$error = new WP_Error();
			$error->add(
				'fa-theme-not-configurable', 
				sprintf( 
					__('Theme <strong>%s</strong> does not support color configuration.', 'fapro'), 
					$theme_data['theme_config']['name'] 
				)
			);
			return $error;
		}
		// get the editable CSS rules
		$editable_css = call_user_func( $theme_function );
		
		// extend the theme css properties by the details set in plugin
		foreach( $editable_css as $element => $details ){
			
			$properties 		= $details['properties'];
			$complete_details 	= array();
			
			foreach( $properties as $property => $default ){		
				// get the property details allowed by the plugin (if any)	
				$property_details = $this->get_property( $property );			
				if( $property_details ){
					if( $default && !empty( $default ) ){
						$property_details['default'] = $default;
					}	
					$complete_details[ $property ] = $property_details;
				}	
			}			
			$editable_css[ $element ]['properties'] = $complete_details;
		}		
		return $editable_css;		
	}
	
	/**
	 * Contains all supported styles. Returns supported rules for a given 
	 * property styling
	 *  
	 * @param unknown_type $style
	 */
	private function get_property( $property ){
		
		$css_properties = array(
			'border-width' => array(
				'type'=>'size_px',
				'text' => __('Border width', 'fapro'),
				'default' => '0px',
				'initial'=>'0px'
			),
			'border-style' => array(
				'type'=>'options',
				'text'=>__('Border style', 'fapro'),
				'default'=>'none',
				'initial'=>'none',
				'options'=>array(
					'none',
					'solid',
					'dotted',
					'dashed',
					'double'
				)
			),
			'border-color' => array(
				'type' => 'color',
				'text' => __('Border color', 'fapro'),
				'default'=>'transparent',
				'initial'=>'transparent'
			),
			
			'background-color' => array(
				'type' => 'color',
				'text' => __('Background color', 'fapro'),
				'default'=> 'transparent',
				'initial'=>'transparent'
			),
			'background-image' => array(
				'type' => 'image',
				'text' => __('Background image', 'fapro'),
				'default'=>'none',
				'initial'=>'none'
			),
			'color' => array(
				'type' => 'color',
				'text' => __('Text color', 'fapro'),
				'default'=>'transparent',
				'initial'=>'transparent'
			),
			'font-size' => array(
				'type' => 'size',
				'text' => __('Font size', 'fapro'),
				'default' => '12px',
				'initial'=>'12px'
			),
			'line-height' => array(
				'type' => 'size',
				'text' => __('Line height', 'fapro'),
				'default' => '16px',
				'initial'=>'16px'
			),
			'text-decoration' => array(
				'type' => 'options',
				'text' => __('Text decoration', 'fapro'),
				'default' => 'none',
				'initial' => 'none',
				'options' => array(
					'none',
					'overline',
					'underline',
					'line-through'
				)
			),
			'text-transform' => array(
				'type' => 'options',
				'text' => __('Text transform', 'fapro'),
				'default' => 'none',
				'initial' => 'none',
				'options' => array(
					'none',
					'capitalize',
					'uppercase',
					'lowercase'
				)
			),		
			'font-weight' => array(
				'type' => 'options',
				'text' => __('Font weight', 'fapro'),
				'default' => 'normal',
				'initial' => 'normal',
				'options' => array(
					'normal',
					'bold',
					'100',
					'200',
					'300',
					'400',
					'500',
					'600',
					'700',
					'800',
					'900'
				)
			),	
			'font-style' => array(
				'type' => 'options',
				'text' => __('Font style', 'fapro'),
				'default' => 'normal',
				'initial' => 'normal',
				'options' => array(
					'normal',
					'italic'
				)
			),	
			'text-align' => array(
				'type' => 'options',
				'text' => __('Text align', 'fapro'),
				'default' => 'left',
				'initial' => 'left',
				'options' => array(
					'left',
					'right',
					'center',
					'justify'
				)
			),
			'background-repeat' => array(
				'type' => 'options',
				'text' => __('Background repeat', 'fapro'),
				'default' => 'repeat',
				'initial' => 'repeat',
				'options' => array(
					'no-repeat',
					'repeat',
					'repeat-x',
					'repeat-y'
				)
			),
			'background-position' => array(
				'type' => 'options',
				'text' => __('Background position', 'fapro'),
				'default' => 'top left',
				'initial' => 'top left',
				'options' => array(
					'left top',
					'left center',
					'left bottom',
					'right top',
					'right center',
					'right bottom',
					'center top',
					'center center',
					'center bottom'
				)
			),
			'float' => array(
				'type' => 'options',
				'text' => __('Align', 'fapro'),
				'default' => 'none',
				'initial' => 'none',
				'options' => array(
					'none',
					'left',
					'right'
				)
			),
			'overflow' => array(
				'type' => 'options',
				'text' => __('Overflow', 'fapro'),
				'default' => 'visible',
				'initial' => 'visible',
				'options' => array(
					'visible',
					'hidden',
					'scroll',
					'auto'
				)
			),
			'border-radius' => array(
				'type' => 'size_px',
				'text' => __('*Round corners', 'fapro'),
				'default' => '0px',
				'initial' => '0px',
				'multiple_css' => array(
					'-moz-border-radius',
					'-webkit-border-radius',
					'-o-border-radius',
					'-ms-border-radius'
				)
			),
			'box-shadow' => array(
				'type' => 'multi_value',
				'text' => __('*Shadow - multiple properties', 'fapro'),
				'values' => array(
					'h-shadow' => array(
						'type' => 'size_px',
						'name' => __('Horizontal position', 'fapro')
					),
					'v-shadow' => array(
						'type' => 'size_px',
						'name' => __('Vertical position', 'fapro')
					),
					'blur' => array(
						'type' => 'size_px',
						'name' => __('Blur distance', 'fapro')
					),
					'spread' => array( 
						'type' => 'size_px',
						'name' => __('Shadow size', 'fapro')
					),
					'color' => array(
						'type' => 'color',
						'name' => __('Shadow color', 'fapro')
					)	
				),
				'default' => '0px 0px 0px 0px transparent',
				'initial' => '0px 0px 0px 0px transparent',
				'multiple_css' => array(
					'-moz-box-shadow',
					'-webkit-box-shadow',
					'-o-box-shadow',
					'-ms-box-shadow'
				)
			),
			'text-shadow' => array(
				'type' => 'multi_value',
				'text' => __('*Text shadow - multiple properties', 'fapro'),
				'values' => array(
					'h-shadow' => array(
						'type' => 'size_px',
						'name' => __('Horizontal position', 'fapro')
					),
					'v-shadow' => array(
						'type' => 'size_px',
						'name' => __('Vertical position', 'fapro')
					),
					'blur' => array(
						'type' => 'size_px',
						'name' => __('Blur distance', 'fapro')
					),
					'color' => array(
						'type' => 'color',
						'name' => __('Shadow color', 'fapro')
					)	
				),
				'default' => '0px 0px 0px transparent',
				'initial' => '0px 0px 0px transparent',
				'multiple_css' => array(
					'-moz-text-shadow',
					'-webkit-text-shadow',
					'-o-text-shadow',
					'-ms-text-shadow'
				)
			)
		);
		
		$borders = array(
			'border-top-'		=>__('Border top', 'fapro'), 
			'border-left-'		=>__('Border left', 'fapro'), 
			'border-right-' 	=> __('Border right', 'fapro'), 
			'border-bottom-' 	=> __('Border bottom', 'fapro')
		);
		$border_styles = array(
			'width' => 'border-width', 
			'style'	=> 'border-style', 
			'color'	=> 'border-color'
		);
		foreach( $borders as $border => $border_name ){		
			foreach( $border_styles as $s => $k ){
				$properties 		= $css_properties[ $k ];
				$properties['text'] = $border_name . ' ' . $s;
				$style_key 			= $border . $s;
				$css_properties[ $style_key ] = $properties;
			}
		}
		
		if( array_key_exists( $property, $css_properties ) ){
			return $css_properties[ $property ];
		}else{
			return false;
		}
	}
	
	/**
	 * Save stylesheet according to user settings
	 */
	public function save_color_scheme( $filename, $edit, $styles ){
		// get configuration details
		$configuration = $this->get_theme_styles();
		
		if( !$configuration ){
			$error = new WP_Error();
			$error->add(
				'fa_theme_not_configurable', 
				__("The theme doesn't support color scheme configuration.", 'fapro')
			);	
			return $error;
		}
		// get theme path
		$theme = $this->get_the_theme();
		$theme_path = $theme['path'];
		if( !$theme_path ){
			$error = new WP_Error();
			$error->add(
				'fa_theme_not_found', 
				__("The theme doesn't exist.", 'fapro')
			);	
			return $error;
		}
		
		// make class name safe
		$filename = sanitize_file_name( $filename );
		$stylesheet_path = wp_normalize_path( $theme_path . '/colors/' . $filename . '.css' );
		
		// if editing and name change, change the name of the existing stylesheet
		if( $edit && $filename != $edit ){
			$existing_stylesheet = wp_normalize_path( $theme_path . '/colors/' . $edit . '.css' );
			if( is_file( $existing_stylesheet ) ){
				// check if the new name isn't conflicting with an existing scheme
				if( is_file( $stylesheet_path ) ){
					$error = new WP_Error();
					$error->add(
						'fa_color_scheme_exists', 
						__("The name of the color scheme you're trying to save already exists. Choose another name and try again.", 'fapro')
					);	
					return false;
				}			
				rename( $existing_stylesheet, $stylesheet_path );
			}		
		}
		// when creating, if stylesheet name exists, don't save anything and alert user of overwrite
		if( !$edit ){
			if( is_file( $stylesheet_path ) ){
				$error = new WP_Error();
				$error->add(
					'fa_color_scheme_exists', 
					__("The name of the color scheme you're trying to save already exists. Choose another name and try again.", 'fapro')
				);	
				return $error;
			}
		}
			
		$styles_content = '';
		$parent = $configuration['container']['css_selector'] . '.' . $filename . ' ';
		foreach( $configuration as $field => $details ){			
			$comment = '/* ' . $details['description'] . ' */';
			
			// determine the css selector to apply styles to
			if( 'container' == $field ){
				// element is main container
				$css_selector = $parent;
			}else if( isset( $details['outside_container'] ) && $details['outside_container'] ){
				// element is outside main container
				$css_selector = $details['css_selector'] . '.' . $filename;
			}else{
				// element is inside main container
				$css_selector = $parent . $details['css_selector'];
			}
			
			$rules = '';
			
			foreach( $details['properties'] as $property => $pdata ){
				
				$is_valid = isset( $styles[ $field ][ $property ] ) && !empty( $styles[ $field ][ $property ] );
				if( is_array( $styles[ $field ][ $property ] ) ){
					$is_valid = isset( $styles[ $field ][ $property ]['value'] ) && !empty( $styles[ $field ][ $property ]['value']);
				}
				
				if( 'size' == $pdata['type'] ){
					$rule = $is_valid ? $styles[ $field ][ $property ]['value'] : false;
				}else if( 'image' == $pdata['type'] ){
					$r = 'url(%1$s)';
					$rule = $is_valid && 'none' != $styles[ $field ][ $property ] ? sprintf( $r, $styles[ $field ][ $property] ) : 'none';				
				}else if( 'size_px' == $pdata['type'] ){
					$rule = $styles[ $field ][ $property ].'px';
				}else if( 'multi_value' == $pdata['type'] ){
					
					$rule_vals = array();
									
					foreach( $pdata['values'] as $sp_name => $sp_details ){
						
						$sp_val = isset( $styles[ $field ][ $property ][ $sp_name ] ) ? $styles[ $field ][ $property ][ $sp_name ] : $pdata['initial'][ $sp_name ];
						
						switch( $sp_details['type'] ){
							case 'size_px':
								$rule_vals[] = ( (int) $sp_val ).'px';
							break;
							case 'color':
								$rule_vals[] = $sp_val;
							break;	
						}
					}
					$rule = implode( ' ', $rule_vals );
					
				}else{	
					$rule = $is_valid ? $styles[ $field ][ $property ] : false;
				}
				
				if( $rule ){				
					if( 'size' == $pdata['type'] ){
						$measurement = isset( $styles[ $field ][ $property ]['unit']) && !empty( $styles[ $field ][ $property ]['unit'] ) ? $styles[ $field ][ $property ]['unit'] : 'px';
						$rule .= $measurement;
					}
				}else{
					$rule = $pdata['initial'];
				}
				
				// for custom variables supporting multiple css declarations
				if( array_key_exists( 'multiple_css', $pdata ) ){
					foreach ( $pdata['multiple_css'] as $vendor_rule ){
						$rules .= "\t" . $vendor_rule . ':' . $rule . ";/*$field*/\n";
					}
				}
				
				$rules .= "\t" . $property . ':' . $rule . ";/*$field*/\n";
			}	
				
			$format = sprintf( "%1\$s%4\$s%2\$s{%4\$s%3\$s}%4\$s", $comment, $css_selector, $rules, "\n" );
			$styles_content .= $format;
		}
		
		$result = $this->save_stylesheet( $stylesheet_path, $styles_content );
		if( is_wp_error( $result ) ){
			return $result;
		}
		
		return $filename;
	}
	/**
	 * Saves styles in stylesheet between markers.
	 * Any editind made outside those markers is preserved.
	 *
	 * @param string $filename
	 * @param string $content
	 */
	private function save_stylesheet( $filename, $content ){
		
		if( !is_file( $filename ) || is_writeable( $filename ) ){
			if( !is_file( $filename ) ){
				$markerdata = '';
			}else{
				$markerdata = explode("\n", implode( '', file( $filename ) ) );
			}
	
			if ( !$f = @fopen( $filename, 'w' ) ){
				$error = new WP_Error();
				$error->add(
					'fa_scheme_not_saved', 
					__("The stylesheet for the color scheme you're trying to save couldn't be created. Check that colors folder and/or color stylesheets have write permission.", 'fapro')
				);	
				return $error;
			}	
				
			$begin_marker = '/* BEGIN FEATURED ARTICLES AUTOMATIC COLOR SCHEME */';
			$warn_marker = "/* \n- DO NOT EDIT BETWEEN THE BEGINING AND ENDING MARKER. \n- DO NOT DELETE THESE MARKERS. \n- PLUGIN ONLY REPLACES WHAT IS BETWEEN THEM WHEN SAVING A NEW COLOR SCHEME. \n*/";
			$end_marker = '/* END FEATURED ARTICLES AUTOMATIC COLOR SCHEME */';
	
			$found = false;
			if( $markerdata ){
				$marker_started = false; 			
				foreach( $markerdata as $n => $markerline ){
					if( strstr( $markerline, $begin_marker ) ){					
						fwrite( $f, $begin_marker . "\n" . $warn_marker . "\n\n" );
						fwrite( $f, $content );
						$marker_started = true;
						continue;
					}
					if( strstr( $markerline, $end_marker ) ){
						fwrite( $f, $end_marker . "\n" );
						$found = true;
						$marker_started = false;
						continue;
					}
					if( !$marker_started ){
						fwrite( $f, $markerline . ( $n+1 < count( $markerdata ) ? "\n" : '' ) );
					}	
				}
			}
			
			if( !$found ){			
				fwrite( $f, "\n" . $begin_marker . "\n" );
				fwrite( $f, $content );
				fwrite( $f, "\n" . $end_marker . "\n" );			
			}
			
			fclose( $f );
			return true;		
		}else{
			$error = new WP_Error();
			$error->add( 'fa_unable_to_create_stylesheet', __('Color scheme stylesheet could not be written into colors folder. Please change the folder permissions before using this feature.', 'fapro') );
			return $error;
		}	
	}
	
	
	
	/**
	 * (non-PHPdoc)
	 * @see FA_Themes_Manager::get_theme()
	 */
	public function get_the_theme(){
		return $this->theme;
	}	
}
/**
 * @package Featured articles PRO - Wordpress plugin
 * @author CodeFlavors ( codeflavors[at]codeflavors.com )
 * @url http://www.codeflavors.com/featured-articles-pro/
 * @version 2.4
 */

/*
	Author: CodeFlavors ( http://www.codeflavors.com )
	Copyrigh (c) 2011 - author
	License: author
	Package: Wordpress Featured Articles PRO plugin
	Version: 1.1
	jQuery version: 1.6.1 +
*/

;(function($){
	
	$.fn.FA_VideoPlayer = function(options){
		
		if( 0 == this.length ){ 
				return false; 
		}
		
		// support multiple elements
       	if (this.length > 1){
            this.each(function( i, e ) { 
				$(e).FA_VideoPlayer(options);				
			});
       	}
		
       	// common params
		var defaults = {
			'width'		: 500,
			'height'	: 375,
			'protocol'  : 'https:',
			// events
			stateChange : function(){}
		};
       	// variables       	
		var self 			= this,
			options 		= $.extend({}, defaults, options),
			playerId 		= false, // stores the player ID generated by the script
			containerId 	= false, // stores ID of the container
			player 			= false, // stores the player reference
			playerData 		= false, // stores player data from HTML
			playerStatus 	= false; // false - not loaded, 1 - ready, 2 - playing, 3 - paused, 4 - stopped			
		
		var initialize = function(){
			// store video data on video container				
			playerData = $(self).data(); // video details from element
			var	id = generateIds(); // container and player unique ids
			// store players ids for later reference
			containerId = id.cid;
			playerId 	= id.pid;
						
			// set unique id on container
			$(self).attr('id', containerId).empty().append('<div id="' + playerId + '"></div>');
						
			// set the options
			options = getParams( playerData.source );
			if( !options ){
				return;
			}			
			options.protocol = 'https:';
			options.uiDialog = false;
			
			// load the player
			loadPlayer();
			
			// responsive
			resizePlayer();			
			$(window).resize(function(){
				resizePlayer();
			});
			
			return self;
		};
		
		var resizePlayer = function(){
			var width = $('#'+containerId).width(),
				height;
			
			switch( options.aspect ){
				case '16x9':
				default:
					height = (width *  9) / 16;
				break;
				case '4x3':
				height = (width *  3) / 4;
				break;
			}
			$('#'+containerId).css({ height : Math.floor( height ) } );			
		}
		
		/**
		 * Get the specific player params for a given video source
		 */
		var playerParams = function( source ){
			// applies to both
			var defaults = {
				'play'		: 0, // play on active
				'volume'	: 30, // default volume
				'fullscreen': 1, // fullscreen capability
				'loop'		: 0, // loop on finish,
				'autoplay'	: 0 // this stays 0. Otherwise, once loaded, videos will start playing					
			};
						
			// youtube specific params
			var youtubeDefaults = {
				'enablejsapi'	:1, // this stays 1 for youtube. enables interaction with player from js
				'modestbranding':1, // different situations for youtube logo
				'autohide'		:0, // controls visibility
				'controls'		:1, // show controls
				'rel'			:0, // show related
				'showinfo'		:0, // show info
				'showsearch'	:0, // show search
				'playerapiid' 	: playerId
			};
			// vimeo specific params
			var vimeoDefaults = {
				'api'		:1, // this stays 1. enables js to interact with the player
				'title'		:0, // show video title
				'byline'	:0, // show video author
				'portrait'	:0, // show author avatar
				'color'		:'', // controls color
				'player_id'	:playerId,
				'clip_id'	:playerData.video_id
			};	
			var result;
			switch( source ){
				case 'youtube':
					result = $.extend(defaults, youtubeDefaults);
				break;
				case 'vimeo':
					result = $.extend(defaults, vimeoDefaults);
				break;
			}
			return result;
		}
		
		
		/**
		 * Combines general params ( vidDefaultParams ) with player
		 * specific params for either supported platforms
		 * */
		var getParams = function( source ){
			var defaults;

			switch( source ){
				case 'youtube':
					defaults = $.extend({}, options, playerParams('youtube'), playerData);
					// youtube has fs for fullscreen so let's set that
					defaults.fs = defaults.fullscreen;
				break;
				case 'vimeo':
					defaults = $.extend({}, options, playerParams('vimeo'), playerData);
					defaults.color = playerData.color.replace('#', '');				
				break
			}
			
			return defaults;
		}
		
		/**
		 * Generates unique ID's for player and player container
		 */
		var generateIds = function(){
			var cid 	= 'FA_videoPlayerContainer_', // container id prefix
				pid 	= 'FAVideoPlayer', // player id prefix
				uid 	= Math.floor(Math.random()*1000),
				result 	= {}; // unique ID
			
			result.cid = cid+uid;
			result.pid = pid+uid;
			
			return result;
		}
		
		// load the video player
		var loadPlayer = function(){			
			// if source is youtube, load the API
			if( options.source == 'youtube' ){
				if( !this.yt_api_loaded ){
					$.getScript( options.protocol + '//www.youtube.com/player_api' );
					this.yt_api_loaded = true;
				}
				if( !YT_API_LOADED ){
					self.yt_interval = setInterval( function(){
						self.loadYTplayer();
					}, 500);
					return;						
				}else{
					self.loadYTplayer();
				}					
			}
			
			// if source is Vimeo, load iframe
			if( options.source == 'vimeo' ){
				self.loadVimeoPlayer();
			}				
		}
		
		this.loadVimeoPlayer = function( p ){
			var params = $.extend( options, p );
			params.ref = false;			
			var ifr = '<iframe style="visibility:visible;" id="'+playerId+'" src="' + options.protocol + '//player.vimeo.com/video/'+options.video_id+'?'+$.param(params)+'" width="100%" height="100%" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';
			$('#'+containerId).empty().append(ifr);
			self.isHTML5 = true;		
		}
		
		
		
		// load YouTube HTML5 player
		this.loadYTplayer = function( p ){
			if( !YT_API_LOADED ){
				return;
			}
			
			if( self.yt_interval ){
				clearInterval( self.yt_interval );
				self.yt_interval = false;
			}
			
			var params = $.extend( options, p );
			params.ref = false;
			
			if( p ){
				$('#'+containerId).empty().append('<div id="' + playerId + '"></div>');				
			}
			
			new YT.Player(playerId, {
				height		: '100%',
				width		: '100%',
				videoId		: options.video_id,
				playerVars	: params,
				events: {
					 'onReady': function( event ){
						 player = event.target;
						 player.setVolume(options.volume);
						 self.updateStatus(1); 
					 },
					 'onStateChange': function( object ){
						 var state = object.data;
						 switch( state ){
				    		case 0:
				    			self.updateStatus(4);
				    		break;
				    		case 1:
				    			self.updateStatus(2);
				    		break;
				    		case 2:
				    			self.updateStatus(3);
				    		break;	
				    	}
					 }
				}
	        });			
		}
		
		/**
		 * Plays, pauses or stops video
		 */
		var doAction = function( action ){
			// when player is ready, it will set ready param on container. Check it.
			if( !playerStatus ){
				setTimeout( function(){
					doAction( action );
				}, 100);
				return;
			}
			
			// different platforms have different function names. Map them here.	
			var platformActions = {
				'vimeo'	: {
					'play' 			: 'api_play',
					'pause' 		: 'api_pause',
					'stop' 			: 'api_stop',
					'volume' 		: 'api_setVolume',
					'volumeDivider' : 100
				},
				'youtube' : {
					'play' 			: 'playVideo',
					'pause' 		: 'pauseVideo',
					'stop' 			: 'stopVideo',
					'volume' 		: 'setVolume',
					'volumeDivider' : 1
				}
			};
			
			// status of player is ready
			playerStatus = 1;
			var funcs = platformActions[playerData.source];			
			
			// get the player object
			if( !player ){
				player = document.getElementById(playerId);
				// if player isn't set, must be first run. Set the player volume
				var volFunc = funcs['volume'],
					volume = ( playerData.volume || 10 ) / platformActions[playerData.source]['volumeDivider'];				
				
				if( options.source == 'vimeo' && self.isHTML5 ){
					FA_post_action( volFunc.replace('api_', ''), volume, playerId );
				}else{				
					player[volFunc](volume);
				}	
			}
			
			// if loading action was triggered, stop here
			if( 'load' == action ){
				return;
			}
			
			// function of player to call
			var func = funcs[action];
			// call function
			if( options.source == 'vimeo' && self.isHTML5 ){
				FA_post_action( func.replace('api_', ''), '', playerId );
			}else{
				player[func]();
			}
			
			// change player status
			switch( action ){
				case 'play':
					playerStatus = 2;
				break;
				case 'pause':
					playerStatus = 3;
				break;
				case 'stop':
					playerStatus = 4;
				break;
			}	
			options.stateChange.call(self, playerStatus);
		}
		
		/**
		 * Play video
		 */
		this.play = function(){			
			doAction('play');			
		};
		
		/**
		 * Pause video
		 */
		this.pause = function(){
			doAction('pause');
		};		
		
		/**
		 * Stop video
		 */
		this.stop = function(){
			doAction('stop');
		};
		
		/**
		 * Returns the player settings
		 */
		this.getData = function(){
			return playerData;
		}
		
		/**
		 * Returns the current player status.
		 * Values: 
		 * - false 	: player not initialized
		 * - 1 		: player is ready
		 * - 2		: playing
		 * - 3		: paused
		 * - 4		: ended
		 */
		this.getStatus = function(){
			return playerStatus;
		}
		
		this.updateStatus = function( status ){
			playerStatus = status;
			options.stateChange.call(self, status);				
		}
		
		this.resizePlayer = resizePlayer;
		
		$(this).data('ref', this);
		return initialize();			
	};	
})(jQuery);

/******************************************************************************
 * HTML5 PLAYERS
 ******************************************************************************/
// YouTube
var YT_API_LOADED = false;

;(function($){
	$(document).ready(function(){
		// if a different script already uses this, call it in our function
		var func = false;
		if(typeof window.onYouTubePlayerAPIReady !== 'undefined' ){
			func = window.onYouTubePlayerAPIReady;
		}
		
		window.onYouTubePlayerAPIReady = function(){
			YT_API_LOADED = true;
			if( func ){
				func();
			}
		}
	})	
})(jQuery);

// Vimeo
//Listen for messages from the player
if (window.addEventListener){
    window.addEventListener('message', FA_receiveMessage, false);
}else{
    window.attachEvent('onmessage', FA_receiveMessage, false);
}

function FA_receiveMessage(e){
	var data 	= jQuery.parseJSON(e.data),
		pid 	= data.player_id;
	
	if( typeof pid === 'undefined' ){
		return;
	}
	
	switch(data.event) {
	    case 'ready':
	    	var playerContainer = jQuery( pid.replace('FAVideoPlayer', '#FA_videoPlayerContainer_') );
	    	jQuery(playerContainer).data('ref').updateStatus( 1 );
	    	// add event listeners
	    	FA_post_action('addEventListener', 'pause', pid);
	    	FA_post_action('addEventListener', 'finish', pid);
	    	FA_post_action('addEventListener', 'play', pid);
	    break;
	       
	    case 'play':	        
	    	var playerContainer = jQuery( pid.replace('FAVideoPlayer', '#FA_videoPlayerContainer_') );
	    	jQuery(playerContainer).data('ref').updateStatus( 2 );	    	
	    break;
	        
	    case 'pause':	
	    	var playerContainer = jQuery( pid.replace('FAVideoPlayer', '#FA_videoPlayerContainer_') );
	    	jQuery(playerContainer).data('ref').updateStatus( 3 );	    	
	    break;
	       
	    case 'finish':	
	    	var playerContainer = jQuery( pid.replace('FAVideoPlayer', '#FA_videoPlayerContainer_') );
	    	jQuery(playerContainer).data('ref').updateStatus( 4 );	    	
	    break;
	}
}
//Helper function for sending a message to the player
function FA_post_action(action, value, pid) {
    var data = { method: action };
    
    if (value) {
        data.value = value;
    }
    
    var f = jQuery('#'+pid)[0];
    
    f.contentWindow.postMessage(JSON.stringify(data), jQuery(f).attr('src').split('?')[0]);
}
